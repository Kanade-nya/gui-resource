name: Build PJSK-MultiGUI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-linux:
    runs-on: ubuntu-22.04

    env:
      CUDA_VISIBLE_DEVICES: ''
    
    name: Build on Linux
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip build-essential libgl1 libx11-dev libsndfile1

      - name: Install Python dependencies
        run: |
          pip3 install Cython==0.29.32
          pip3 install -r requirements.txt pyinstaller
          pip uninstall -y torch triton
          pip uninstall -y $(pip freeze | grep 'nvidia-' | cut -d '=' -f 1)
          pip install torch==2.3.1+cpu --index-url https://download.pytorch.org/whl/cpu

      - name: Build local Cython module
        run: |
          cd monotonic_align
          python3 setup.py build_ext --inplace

      - name: Build with PyInstaller
        run: pyinstaller --clean PJSK-MultiGUI.spec  \
            --add-binary "$(python -c 'import os, soundfile; print(os.path.join(os.path.dirname(soundfile.__file__), "_soundfile_data", "libsndfile.so"))'):_soundfile_data"

      - name: Compress dist folder
        run: |
          tar -cf - dist/ | zstd -7 > PJSK-MultiGUI-Linux-${{ github.ref_name }}.tar.xz

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: PJSK-MultiGUI-Linux-TarXz
          path: PJSK-MultiGUI-Linux-${{ github.ref_name }}.tar.xz

  build-windows:
    runs-on: windows-2022
    name: Build on Windows 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install Cython==0.29.32
          pip install -r requirements.txt pyinstaller
      
      - name: Build local Cython module
        run: |
          cd monotonic_align
          python setup.py build_ext --inplace

      - name: Build with PyInstaller
        run: pyinstaller PJSK-MultiGUI.spec
      
      - name: Compress Windows dist to ZIP
        run: powershell Compress-Archive -Path dist/* -DestinationPath PJSK-MultiGUI-Windows-${{ github.ref_name }}.zip

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: PJSK-MultiGUI-Windows-Zip
          path: PJSK-MultiGUI-Windows-${{ github.ref_name }}.zip

  build-macos-intel:
    runs-on: macos-13
    name: Build on macOS Intel (target 13.0)
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install Cython==0.29.32
          pip install -r requirements.txt pyinstaller
        
      - name: Build local Cython module
        run: |
          cd monotonic_align
          python setup.py build_ext --inplace

      - name: Build with PyInstaller
        run: pyinstaller PJSK-MultiGUI.spec

      - name: Compress .app bundle
        run: |
          ditto -c -k --sequesterRsrc --keepParent dist/PJSK-MultiGUI.app PJSK-MultiGUI-macOS-Intel-${{ github.ref_name }}.zip

      - name: Upload compressed .app zip
        uses: actions/upload-artifact@v4
        with:
          name: PJSK-MultiGUI-macOS-Intel-Zip
          path: PJSK-MultiGUI-macOS-Intel-${{ github.ref_name }}.zip

  build-macos-arm:
    runs-on: macos-14
    name: Build on macOS ARM
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          brew install libsndfile || true
          pip install Cython==0.29.32
          pip install -r requirements.txt pyinstaller
      
      - name: Build local Cython module
        run: |
          cd monotonic_align
          python setup.py build_ext --inplace

      - name: Build with PyInstaller
        run: pyinstaller PJSK-MultiGUI.spec \
            --add-binary "$(python -c 'import os, soundfile; print(os.path.join(os.path.dirname(soundfile.__file__), "_soundfile_data", "libsndfile.dylib"))'):_soundfile_data"
      
      - name: Compress .app bundle
        run: |
          ditto -c -k --sequesterRsrc --keepParent dist/PJSK-MultiGUI.app PJSK-MultiGUI-macOS-ARM-${{ github.ref_name }}.zip

      - name: Upload compressed .app zip
        uses: actions/upload-artifact@v4
        with:
          name: PJSK-MultiGUI-macOS-ARM-Zip
          path: PJSK-MultiGUI-macOS-ARM-${{ github.ref_name }}.zip
  release-assets:
    name: Upload to GitHub Release
    needs:
      - build-linux
      - build-windows
      - build-macos-intel
      - build-macos-arm
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: PJSK-MultiGUI-Linux-TarXz
          path: out/linux

      - uses: actions/download-artifact@v4
        with:
          name: PJSK-MultiGUI-Windows-Zip
          path: out/windows

      - uses: actions/download-artifact@v4
        with:
          name: PJSK-MultiGUI-macOS-Intel-Zip
          path: out/macos-intel

      - uses: actions/download-artifact@v4
        with:
          name: PJSK-MultiGUI-macOS-ARM-Zip
          path: out/macos-arm

      - name: Upload to GitHub Releases
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.PJSKMGUI }}
          files: |
            out/linux/**
            out/windows/**
            out/macos-intel/**
            out/macos-arm/**
